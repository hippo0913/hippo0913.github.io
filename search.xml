<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/hexo/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>Hexo教程：<br>中文网址<a href="https://hexo.io/zh-cn/docs/configuration">链接</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><p>搜索框无法响应</p>
]]></content>
      <categories>
        <category>hexo学习</category>
      </categories>
      <tags>
        <tag>hexo学习</tag>
      </tags>
  </entry>
  <entry>
    <title>注意力机制</title>
    <url>/HPC/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="注意力机制"><a href="#注意力机制" class="headerlink" title=" 注意力机制 "></a><center> 注意力机制 </center></h1><h2 id="什么是注意力机制"><a href="#什么是注意力机制" class="headerlink" title="什么是注意力机制"></a>什么是注意力机制</h2><p>注意力机制（Attention Mechanism）是一种用于处理和解决信息超载问题的资源分配方案，它可以将计算资源分配给更重要的任务。这种机制可以应用于任何类型的输入，而不管其形状如何。在机器学习中，注意力机制已经广泛应用于自然语言处理、图像识别及语音识别等各种不同类型的机器学习任务中。</p>
<p>注意力机制可以模拟人类在处理信息时的选择性关注和记忆机制，它通过计算输入序列中不同位置之间的相关性得分，得到一个权重分布，然后使用这个权重分布对输入序列进行加权求和，得到一个加权后的表示。这个表示可以看作是输入序列的压缩表示，它包含了输入序列的重要信息和上下文关系。</p>
<p>注意力机制可以分为自注意力机制和它注意力机制两种类型。自注意力机制通过计算输入序列中不同位置之间的相关性得分来得到权重分布，它适用于需要捕捉输入序列内部相关性的任务。它注意力机制则通过计算输入序列与查询之间的相似度来得到权重分布，它适用于需要比较输入序列与查询之间相似度的任务。</p>
<p>总之，注意力机制是一种有效的数据处理方法，它可以提高模型的效率和准确性，是自然语言处理领域的一个重要研究方向。</p>
]]></content>
      <categories>
        <category>HPC</category>
        <category>CONCEPTION</category>
      </categories>
      <tags>
        <tag>HPC</tag>
        <tag>CONCEPTION</tag>
      </tags>
  </entry>
  <entry>
    <title>git心得</title>
    <url>/TOOLS/git%E5%BF%83%E5%BE%97/git%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h1 id="第一次准备电脑环境"><a href="#第一次准备电脑环境" class="headerlink" title="第一次准备电脑环境"></a>第一次准备电脑环境</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line">sudo apt-get install git-lfs</span><br></pre></td></tr></table></figure>

<h1 id="git-常用命令及参数详解"><a href="#git-常用命令及参数详解" class="headerlink" title="git 常用命令及参数详解"></a>git 常用命令及参数详解</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git add</span></span><br><span class="line">git add 用于添加文件改动到本地仓库</span><br><span class="line">参数说明：</span><br><span class="line">-u:可选参数 添加所有受git仓库管控的文件改动到本地仓库，注意，不包括不受git仓库管控的文件</span><br><span class="line">pathspec:必选参数 需要添加git管控的文件，或文件夹</span><br><span class="line">更多命令参数请参考 git add --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git apply</span></span><br><span class="line">git apply 用于应用.patch文件</span><br><span class="line">参数说明：</span><br><span class="line">pathspec:可选参数 .patch文件</span><br><span class="line">更多命令参数请参考 git apply --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git branch</span></span><br><span class="line">git branch 用于操作与git分支相关命令</span><br><span class="line">参数说明：</span><br><span class="line">-v|-vv|--verbose:可选参数 详细列出本地所有分支及其关联的远端分支</span><br><span class="line">-a:可选参数 列出所有本地分支及所有远端分支，包括本地分支与远端分支的关联</span><br><span class="line">-d &lt;branch-name&gt;:可选参数 删除指定的本地分支&lt;branch-name&gt;</span><br><span class="line">-D &lt;branch-name&gt;:可选参数 强制删除指定的本地分支&lt;branch-name&gt;</span><br><span class="line">-r :可选参数 列出所有远端分支</span><br><span class="line">更多命令参数请参考 git branch --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git checkout</span></span><br><span class="line">git checkout 用于创建、切换分支或恢复文件</span><br><span class="line">参数说明：</span><br><span class="line">git checkout branch:可选参数 切换分支，若branch与远端分支名称一致，则会自动关联</span><br><span class="line">git checkout -b branch:可选参数 新建分支</span><br><span class="line">git checkout file:可选参数 将文件恢复到上次提交状态，你的改动将全部丢失</span><br><span class="line">更多命令参数请参考 git checkout --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git cherry-pick</span></span><br><span class="line">git cherry-pick 用于拣选单次或多次commit <span class="built_in">id</span></span><br><span class="line">参数说明：</span><br><span class="line">&lt;commit <span class="built_in">hash</span>&gt;...:可选参数 一次拣选一到多个commit提交</span><br><span class="line">--<span class="built_in">continue</span>:可选参数 用于冲突解决完成之后，继续拣选</span><br><span class="line">--abort:可选参数 放弃拣选</span><br><span class="line">更多命令参数请参考 git cherry-pick --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git clone</span></span><br><span class="line">git <span class="built_in">clone</span>用于<span class="built_in">clone</span> http或者ssh链接的git仓库到本地</span><br><span class="line">参数说明：</span><br><span class="line">&lt;directory&gt;:可选参数 可在此重命名你的git仓库所在目录</span><br><span class="line">--depth=n:可选参数 选择<span class="built_in">clone</span>最近n次的提交记录;但是在下次pull的时候，一样会拉取全部<span class="built_in">history</span>，没啥好用的。实用场景就是git仓库过大，你只想看看当前n次的代码。快点而已</span><br><span class="line">-b &lt;name&gt;|--branch &lt;name&gt; 拉取分支名称为name的仓库，相当于执行了git <span class="built_in">clone</span> 然后执行git checkout name</span><br><span class="line">更多命令参数请参考 git <span class="built_in">clone</span> --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git commit</span></span><br><span class="line">git commit 用于提交本地已 git add的文件到本地仓库，并生成git <span class="built_in">hash</span></span><br><span class="line">参数说明：</span><br><span class="line">-m &lt;msg&gt;, --message=&lt;msg&gt;: 可选参数，但强烈建议写好commit <span class="built_in">log</span></span><br><span class="line">更多命令参数请参考 git commit --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git diff</span></span><br><span class="line">git diff 用于比较本地仓库文件的改动</span><br><span class="line">参数说明：</span><br><span class="line">pathspec:可选参数 本地文件与本地仓库的文件进行diff比对;不加此参数比对所有改动进行比对</span><br><span class="line">另外：git diff &gt; ***.patch 命令可生成patch文件，用于其他地方apply</span><br><span class="line">更多命令参数请参考 git diff --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git fetch</span></span><br><span class="line">git fetch 用于获取远程仓库的所有更改，并将其存储在本地仓库的暂存区中，但不会自动合并到当前工作分支。</span><br><span class="line">&lt;remote&gt;:可选参数 要获取更新的远程仓库，默认为origin</span><br><span class="line">&lt;branch&gt;:可选参数 指定要更新的远程分支，不指定就获取所有远程分支的更新</span><br><span class="line">--all:可选参数 获取所有远程分支的更新</span><br><span class="line">--tags:可选参数 获取所有标签的更新</span><br><span class="line">-p, --prune:可选参数 在获取更新后删除已经超时的远程分支</span><br><span class="line">更多命令参数请参考 git fetch --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git merge</span></span><br><span class="line">git merge 用于将两个分支合并到一起</span><br><span class="line">参数说明：</span><br><span class="line">&lt;branch&gt;:可选参数 这个命令用于将指定分支的更改合并到当前所在的分支上</span><br><span class="line">origin/&lt;branch&gt;:可选参数 这个命令用于将远程分支的更改合并到当前所在的分支上，并形成一个新的提交。</span><br><span class="line">--abort:可选参数 这个命令用于中止当前的合并操作</span><br><span class="line">更多命令参数请参考 git merge --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git log</span></span><br><span class="line">git <span class="built_in">log</span> 显示所有的提交记录，按时间顺序倒序排列</span><br><span class="line">参数说明：</span><br><span class="line">-p:可选参数 这个命令会按补丁显示每个更新间的差异</span><br><span class="line">-n:可选参数 这个命令会显示最新的n次提交</span><br><span class="line">--author:可选参数 这个命令会筛选某人提交的历史记录</span><br><span class="line">--graph:可选参数 这个命令会显示分支的gragh信息</span><br><span class="line">更多命令参数请参考 git <span class="built_in">log</span> --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git pull</span></span><br><span class="line">git pull 将远程存储库中的更改合并到当前分支中</span><br><span class="line">git pull使用给定的参数运行git fetch，并调用git merge将检索到的分支头合并到当前分支中</span><br><span class="line">参数说明：</span><br><span class="line">--rebase 运行git rebase而不是git merge</span><br><span class="line">更多命令参数请参考 git pull --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git push</span></span><br><span class="line">git push 将本地分支的更新推送到远程主机</span><br><span class="line">本地分支与远端分支，已经有关联的，可以直接调用git push指令更新远端分支</span><br><span class="line">参数说明：</span><br><span class="line">origin &lt;branch&gt;:可选参数 这个命令会推送本地分支到远端不存在的分支，即远端新建分支</span><br><span class="line">更多命令参数请参考 git push --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git reset</span></span><br><span class="line">git reset 用于回退版本，可以指定退回某一次提交的版本</span><br><span class="line">参数说明：</span><br><span class="line">--soft:可选参数 可以在回退版本的同时保留暂存区中的文件，而不会影响工作目录中的文件。</span><br><span class="line">--mixed:可选参数 这是默认参数，此参数可以在回退版本的同时清除暂存区中已经提交的文件，保留工作目录中的文件，同时也会清空暂存区中未提交的修改。</span><br><span class="line">--hard:可选参数 可以在回退版本的同时清除暂存区和工作目录中的所有修改，甚至连未提交的修改也会被清除。</span><br><span class="line">&lt;file&gt;:可选参数 可以指定某文件回退</span><br><span class="line">更多命令参数请参考 git reset --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git restore</span></span><br><span class="line">git restore 用于恢复文件到特定版本</span><br><span class="line">参数说明：</span><br><span class="line">--<span class="built_in">source</span>:可选参数 用于指定要恢复的文件或提交。如果不指定，默认使用HEAD</span><br><span class="line">-staged:可选参数 用于将恢复的文件添加到暂存区</span><br><span class="line">&lt;file&gt;:必选参数 要恢复的文件列表</span><br><span class="line">更多命令参数请参考 git restore --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git revert</span></span><br><span class="line">git revert 用于创建一个新的提交，该提交会撤销之前的提交，并将之前的提交的内容保存在Git仓库中</span><br><span class="line">参数说明：</span><br><span class="line">&lt;commit-hash&gt; 是要撤销的提交的唯一标识符</span><br><span class="line">更多命令参数请参考 git revert --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git rm</span></span><br><span class="line">git <span class="built_in">rm</span> 从暂存区和工作目录中删除文件，并将其从Git仓库中移除</span><br><span class="line">参数说明：</span><br><span class="line">-f:可选参数 强制删除文件，即使该文件已经被修改</span><br><span class="line">--cached:可选参数 仅从暂存区中删除文件，保留在工作区的文件</span><br><span class="line">-r:可选参数 递归删除目录及其内容</span><br><span class="line">&lt;file&gt;:必选参数 要删除的文件或目录</span><br><span class="line">更多命令参数请参考 git <span class="built_in">rm</span> --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git show</span></span><br><span class="line">git show 用于显示某个提交的详细信息和更改内容。它可以显示提交的日志消息、文本差异和引入的更改</span><br><span class="line">参数说明：</span><br><span class="line">&lt;object&gt;:必选参数 要显示的对象的名称</span><br><span class="line">--pretty=&lt;format&gt;:可选参数 以特定格式漂亮地打印提交日志中的内容。可用的格式包括oneline、short、medium、full、fuller、email、raw和format:&lt;string&gt;。默认为medium。</span><br><span class="line">--<span class="built_in">stat</span>:可选参数 显示每个修改的统计信息（类似git diff --<span class="built_in">stat</span>）</span><br><span class="line">--no-patch:可选参数 与--<span class="built_in">stat</span>一起使用，它不会显示任何patch，只显示<span class="built_in">stat</span>信息</span><br><span class="line">--full-diff:可选参数 以git diff--full-index的方式显示所有更改。这会显示二进制文件中的更改，以及在文件名或状态中显示的更改。</span><br><span class="line">更多命令参数请参考 git show --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git stash</span></span><br><span class="line">git stash 用于暂存和恢复工作目录中的修改。它可以将工作目录中的修改临时存储起来，并返回到一个干净的工作目录状态。</span><br><span class="line">参数说明：</span><br><span class="line">save:可选参数 保存当前工作目录中的修改，并创建一个新的stash</span><br><span class="line">drop:可选参数，如果不添加stash名称，则删除最近的一个，反之删除对应的stash</span><br><span class="line">pop:可选参数 从最近保存的stash中恢复工作目录的修改，并将stash删除</span><br><span class="line">show:可选参数 显示指定或最新的stash内容</span><br><span class="line">list:可选参数 列出所有的stash</span><br><span class="line">更多命令参数请参考 git stash --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git status</span></span><br><span class="line">git status 是Git版本控制系统中用于显示工作目录和暂存区状态的一条命令</span><br><span class="line">参数说明：</span><br><span class="line">&lt;pathspec&gt;...:可选参数 只显示&lt;pathspec&gt;文件或&lt;pathspec&gt;目录中的修改文件</span><br><span class="line">-s:可选参数 只显示文件名和文件状态</span><br><span class="line">更多命令参数请参考 git status --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">撤销本地提交</span><br><span class="line">git reset HEAD~n n是你要撤销的次数</span><br></pre></td></tr></table></figure>

<h1 id="git-lfs-常用命令及参数说明"><a href="#git-lfs-常用命令及参数说明" class="headerlink" title="git lfs 常用命令及参数说明"></a>git lfs 常用命令及参数说明</h1><p>用于管控git仓库中的二进制文件，在每次git pull的时候，只会pull下来一个该二进制文件对应的文件指针。其目的是缩小git仓库的大小，如果只看代码的话，就可以不用等待大文件下载时间便可以拉取仓库，等需要的时候再用git lfs pull 拉取lfs大文件。<br>常用git lfs相关命令如下，<br>由于git lfs并没git原生自带，需要手动安装<br>使用方式<br>进入仓库根目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git lfs install <span class="comment">#启用 git-lfs</span></span><br><span class="line">git lfs track <span class="string">&quot;*.onnx&quot;</span> <span class="comment">#追踪后缀名为 &quot;*.onnx&quot;的文件</span></span><br><span class="line">git add .gitattributes <span class="comment"># .gitattributes自动生成，里面记录追踪的信息</span></span><br><span class="line">git lfs ls-files 显示当前仓库中受git lfs管控的所有文件</span><br></pre></td></tr></table></figure>

<p>其他常用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git lfs <span class="built_in">env</span> 显示当前git lfs环境</span><br><span class="line">git lfs version <span class="comment"># 显示当前所用lfs版本</span></span><br><span class="line">git lfs track 指定要跟踪的文件或目录</span><br><span class="line">git lfs status 显示当前仓库中大型文件的状态</span><br><span class="line">git lfs ls-files 显示当前仓库中受git lfs管控的所有文件</span><br><span class="line">git lfs pull 从远程仓库拉取大型文件</span><br><span class="line">git lfs prune 清理已经删除或未使用的文件</span><br><span class="line">更多命令参数请参考 git lfs --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<p>当仓库被push到gitlab上后，对应被追踪的文件也有打上LFS的标签</p>
<p>虽然使用了git lfs，但从gitlab或者github拉取项目的时候，还是默认会拉取lfs文件，需要修改环境变量才能默认不拉取lfs文件，并不友好。因此我们的做法是，在仓库根目录下新建一个文件.lfsconfig，用来排除拉取lfs大文件，比如排除onnx和engine文件，.lfsconfig内容为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[lfs]</span><br><span class="line">        fetchexclude = *.onnx, *.engine,</span><br></pre></td></tr></table></figure>
<p>然后进入到有lfs的子目录中，track对应的后缀名文件。<br>这样如果正常clone仓库到本地是不会拉取lfs大文件，如果需要下载lfs文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git lfs pull -I <span class="string">&quot;*&quot;</span> -X <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 或者 git lfs pull --include &quot;*&quot; -exclude &quot;&quot; include 所有.lfsconfig 里面exclude的文件</span></span><br></pre></td></tr></table></figure>
<p>注意：当git pull新的commit后，最好也git lfs pull，保证新上传的模型也拉取下来</p>
]]></content>
      <categories>
        <category>TOOLS</category>
        <category>GIT</category>
      </categories>
      <tags>
        <tag>TOOLS</tag>
        <tag>GIT</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/TOOLS/markdown/markdown/</url>
    <content><![CDATA[<h1 id="Markdown语法记录"><a href="#Markdown语法记录" class="headerlink" title=" Markdown语法记录 "></a><center> Markdown语法记录 <center></h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h3 id="标题居中"><a href="#标题居中" class="headerlink" title="标题居中"></a>标题居中</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># <span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span> 居中的标题 <span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure>

<h3 id="标题自动编号"><a href="#标题自动编号" class="headerlink" title="标题自动编号"></a>标题自动编号</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">vscode安装<span class="code">`Markdown Preview Enhanced`</span>插件</span><br><span class="line">命令运行 &gt;Markdown Preview Enhanced: Customize Css</span><br><span class="line">复制以下代码到style.css中</span><br><span class="line"></span><br><span class="line">/* Please visit the URL below for more information: <span class="emphasis">*/</span></span><br><span class="line"><span class="emphasis">/*</span>   https://shd101wyy.github.io/markdown-preview-enhanced/#/customize-css <span class="emphasis">*/</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">/*</span>*</span><br><span class="line"><span class="bullet"> *</span> 首先在父元素中（在这里是 body 元素），初始化你想要编号的最大标题的计数。</span><br><span class="line"> <span class="emphasis">*/</span></span><br><span class="line"><span class="emphasis">body &#123;</span></span><br><span class="line"><span class="emphasis">  counter-reset: hbody;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">/*</span>*</span><br><span class="line"><span class="bullet"> *</span> 然后父标题初始化子标题的计数，下面以此类推。</span><br><span class="line"> <span class="emphasis">*/</span></span><br><span class="line"><span class="emphasis">h1 &#123;</span></span><br><span class="line"><span class="emphasis">  counter-reset: h1;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">h2 &#123;</span></span><br><span class="line"><span class="emphasis">  counter-reset: h2;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">h3 &#123;</span></span><br><span class="line"><span class="emphasis">  counter-reset: h3;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">h4 &#123;</span></span><br><span class="line"><span class="emphasis">  counter-reset: h4;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">h5 &#123;</span></span><br><span class="line"><span class="emphasis">  counter-reset: h5;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">/*</span>*</span><br><span class="line"><span class="bullet"> *</span> 接着在每个标题前面自动加上编号</span><br><span class="line"><span class="bullet"> *</span></span><br><span class="line"> * 如果不想从 h1 开始自动编号，而是把 h1 当成文章题目，从 h2 开始自动编号，那么</span><br><span class="line"><span class="bullet"> *</span> 1. 把 h1:before 注释</span><br><span class="line"><span class="bullet"> *</span> 2. 从 h2:before 开始到 h6:before，把编号开头的 counter(hbody) &quot;.&quot; 这一部分删除</span><br><span class="line"> <span class="emphasis">*/</span></span><br><span class="line"><span class="emphasis">h1:before &#123;</span></span><br><span class="line"><span class="emphasis">  counter-increment: hbody;</span></span><br><span class="line"><span class="emphasis">  content: counter(hbody) &quot;. &quot;;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis">h2:before &#123;</span></span><br><span class="line"><span class="emphasis">  counter-increment: h1;</span></span><br><span class="line"><span class="emphasis">  content: counter(hbody) &quot;.&quot; counter(h1) &quot;. &quot;;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">h3:before &#123;</span></span><br><span class="line"><span class="emphasis">  counter-increment: h2;</span></span><br><span class="line"><span class="emphasis">  content: counter(hbody) &quot;.&quot; counter(h1) &quot;.&quot; counter(h2) &quot;. &quot;;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">h4:before &#123;</span></span><br><span class="line"><span class="emphasis">  counter-increment: h3;</span></span><br><span class="line"><span class="emphasis">  content: counter(hbody) &quot;.&quot; counter(h1) &quot;.&quot; counter(h2) &quot;.&quot; counter(h3) &quot;. &quot;;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">h5:before &#123;</span></span><br><span class="line"><span class="emphasis">  counter-increment: h4;</span></span><br><span class="line"><span class="emphasis">  content: counter(hbody) &quot;.&quot; counter(h1) &quot;.&quot; counter(h2) &quot;.&quot; counter(h3) &quot;.&quot; counter(h4) &quot;. &quot;;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">h6:before &#123;</span></span><br><span class="line"><span class="emphasis">  counter-increment: h5;</span></span><br><span class="line"><span class="emphasis">  content: counter(hbody) &quot;.&quot; counter(h1) &quot;.&quot; counter(h2) &quot;.&quot; counter(h3) &quot;.&quot; counter(h4) &quot;.&quot; counter(h5) &quot;. &quot;;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">.markdown-preview.markdown-preview &#123;</span></span><br><span class="line"><span class="emphasis">  // modify your style here</span></span><br><span class="line"><span class="emphasis">  // eg: background-color: blue;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TOOLS</category>
        <category>MARKDOWN</category>
      </categories>
      <tags>
        <tag>TOOLS</tag>
        <tag>MARKDOWN</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh心得</title>
    <url>/TOOLS/ssh%E5%BF%83%E5%BE%97/ssh%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h1 id="远程连接命令"><a href="#远程连接命令" class="headerlink" title="远程连接命令"></a>远程连接命令</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server <span class="comment"># 被连接方安装</span></span><br><span class="line">sudo apt-get install sshpass</span><br></pre></td></tr></table></figure>
<h2 id="ssh命令参数解释"><a href="#ssh命令参数解释" class="headerlink" title="ssh命令参数解释"></a>ssh命令参数解释</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-p 指定登录端口号，默认22</span><br><span class="line">-o 指定ssh配置选项</span><br><span class="line">-J 用于在多个SSH跳转之间建立连接 例如ssh -J userA@ipA userB@ipB 注意，各主机节点需要跳转，必须是线性连接</span><br><span class="line">-T 用于测试连接 例如配好github的公钥之后，使用 ssh -T git@github.com可测试</span><br></pre></td></tr></table></figure>

<h2 id="scp命令参数解释"><a href="#scp命令参数解释" class="headerlink" title="scp命令参数解释"></a>scp命令参数解释</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-r:传输目录时，必选 递归scp整个目录</span><br><span class="line">-P:可选参数，默认22</span><br><span class="line">-q:可选参数 不显示传输进度条</span><br><span class="line">-o:可选参数 指定跳板机</span><br><span class="line"></span><br><span class="line">比如 要通过userA的跳板机，拉取userB的/data目录到本地 前提是你不能连接orin，否则scp这二货会优先读取本地的orin连接，直接跳转到本地直连的orin</span><br><span class="line">scp -r -o <span class="string">&quot;ProxyJump userA@ipA&quot;</span> &lt;username&gt;@&lt;ip&gt;:<span class="string">&quot;/data/&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="sshpass命令参数解释"><a href="#sshpass命令参数解释" class="headerlink" title="sshpass命令参数解释"></a>sshpass命令参数解释</h2><p>sshpass<br>参数说明：<br>-p 远程服务器密码<br>更多命令参数请参考 sshpass –help</p>
<h1 id="比如需要命令实现免密ls-远程上的用户目录"><a href="#比如需要命令实现免密ls-远程上的用户目录" class="headerlink" title="比如需要命令实现免密ls 远程上的用户目录"></a>比如需要命令实现免密ls 远程上的用户目录</h1><p>sshpass -p <password> ssh <username>@<ip> “ls ~”</p>
<h2 id="ssh花里胡哨操作"><a href="#ssh花里胡哨操作" class="headerlink" title="ssh花里胡哨操作"></a>ssh花里胡哨操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建ssh的key</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C <span class="string">&quot;&lt;your-email&gt;&quot;</span></span><br><span class="line"><span class="comment"># 一路回车，把id_rsa.github.pub拷贝到 https://github.com/settings/ssh/new 的Key里，这样你就可以免密操作github的仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用config来管理ssh连接</span></span><br><span class="line">vim ~/.ssh/config</span><br><span class="line">Host hostname</span><br><span class="line">User root</span><br><span class="line">HostName 192.168.1.1</span><br><span class="line">:wq</span><br><span class="line">ssh hostname 就可以对192.168.1.1发起ssh连接</span><br><span class="line"></span><br><span class="line">Port为端口号，默认22</span><br><span class="line">IdentityFile为:ssh私钥文件的地址，刚才的例子中为~/.ssh/id_rsa.github文件</span><br><span class="line">以上两个参数都是默认的</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TOOLS</category>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>TOOLS</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
</search>
